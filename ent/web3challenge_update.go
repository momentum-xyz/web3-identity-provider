// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/predicate"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3challenge"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3user"
	"github.com/google/uuid"
)

// Web3ChallengeUpdate is the builder for updating Web3Challenge entities.
type Web3ChallengeUpdate struct {
	config
	hooks    []Hook
	mutation *Web3ChallengeMutation
}

// Where appends a list predicates to the Web3ChallengeUpdate builder.
func (wu *Web3ChallengeUpdate) Where(ps ...predicate.Web3Challenge) *Web3ChallengeUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUUID sets the "uuid" field.
func (wu *Web3ChallengeUpdate) SetUUID(u uuid.UUID) *Web3ChallengeUpdate {
	wu.mutation.SetUUID(u)
	return wu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (wu *Web3ChallengeUpdate) SetNillableUUID(u *uuid.UUID) *Web3ChallengeUpdate {
	if u != nil {
		wu.SetUUID(*u)
	}
	return wu
}

// SetWeb3UserID sets the "web3_user_id" field.
func (wu *Web3ChallengeUpdate) SetWeb3UserID(i int) *Web3ChallengeUpdate {
	wu.mutation.SetWeb3UserID(i)
	return wu
}

// SetLoginChallenge sets the "login_challenge" field.
func (wu *Web3ChallengeUpdate) SetLoginChallenge(s string) *Web3ChallengeUpdate {
	wu.mutation.SetLoginChallenge(s)
	return wu
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (wu *Web3ChallengeUpdate) SetWeb3Challenge(s string) *Web3ChallengeUpdate {
	wu.mutation.SetWeb3Challenge(s)
	return wu
}

// SetWeb3User sets the "web3_user" edge to the Web3User entity.
func (wu *Web3ChallengeUpdate) SetWeb3User(w *Web3User) *Web3ChallengeUpdate {
	return wu.SetWeb3UserID(w.ID)
}

// Mutation returns the Web3ChallengeMutation object of the builder.
func (wu *Web3ChallengeUpdate) Mutation() *Web3ChallengeMutation {
	return wu.mutation
}

// ClearWeb3User clears the "web3_user" edge to the Web3User entity.
func (wu *Web3ChallengeUpdate) ClearWeb3User() *Web3ChallengeUpdate {
	wu.mutation.ClearWeb3User()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *Web3ChallengeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Web3ChallengeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *Web3ChallengeUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *Web3ChallengeUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *Web3ChallengeUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *Web3ChallengeUpdate) check() error {
	if _, ok := wu.mutation.Web3UserID(); wu.mutation.Web3UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Web3Challenge.web3_user"`)
	}
	return nil
}

func (wu *Web3ChallengeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   web3challenge.Table,
			Columns: web3challenge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: web3challenge.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: web3challenge.FieldUUID,
		})
	}
	if value, ok := wu.mutation.LoginChallenge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldLoginChallenge,
		})
	}
	if value, ok := wu.mutation.Web3Challenge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldWeb3Challenge,
		})
	}
	if wu.mutation.Web3UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   web3challenge.Web3UserTable,
			Columns: []string{web3challenge.Web3UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: web3user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.Web3UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   web3challenge.Web3UserTable,
			Columns: []string{web3challenge.Web3UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: web3user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{web3challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// Web3ChallengeUpdateOne is the builder for updating a single Web3Challenge entity.
type Web3ChallengeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Web3ChallengeMutation
}

// SetUUID sets the "uuid" field.
func (wuo *Web3ChallengeUpdateOne) SetUUID(u uuid.UUID) *Web3ChallengeUpdateOne {
	wuo.mutation.SetUUID(u)
	return wuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (wuo *Web3ChallengeUpdateOne) SetNillableUUID(u *uuid.UUID) *Web3ChallengeUpdateOne {
	if u != nil {
		wuo.SetUUID(*u)
	}
	return wuo
}

// SetWeb3UserID sets the "web3_user_id" field.
func (wuo *Web3ChallengeUpdateOne) SetWeb3UserID(i int) *Web3ChallengeUpdateOne {
	wuo.mutation.SetWeb3UserID(i)
	return wuo
}

// SetLoginChallenge sets the "login_challenge" field.
func (wuo *Web3ChallengeUpdateOne) SetLoginChallenge(s string) *Web3ChallengeUpdateOne {
	wuo.mutation.SetLoginChallenge(s)
	return wuo
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (wuo *Web3ChallengeUpdateOne) SetWeb3Challenge(s string) *Web3ChallengeUpdateOne {
	wuo.mutation.SetWeb3Challenge(s)
	return wuo
}

// SetWeb3User sets the "web3_user" edge to the Web3User entity.
func (wuo *Web3ChallengeUpdateOne) SetWeb3User(w *Web3User) *Web3ChallengeUpdateOne {
	return wuo.SetWeb3UserID(w.ID)
}

// Mutation returns the Web3ChallengeMutation object of the builder.
func (wuo *Web3ChallengeUpdateOne) Mutation() *Web3ChallengeMutation {
	return wuo.mutation
}

// ClearWeb3User clears the "web3_user" edge to the Web3User entity.
func (wuo *Web3ChallengeUpdateOne) ClearWeb3User() *Web3ChallengeUpdateOne {
	wuo.mutation.ClearWeb3User()
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *Web3ChallengeUpdateOne) Select(field string, fields ...string) *Web3ChallengeUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Web3Challenge entity.
func (wuo *Web3ChallengeUpdateOne) Save(ctx context.Context) (*Web3Challenge, error) {
	var (
		err  error
		node *Web3Challenge
	)
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Web3ChallengeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *Web3ChallengeUpdateOne) SaveX(ctx context.Context) *Web3Challenge {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *Web3ChallengeUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *Web3ChallengeUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *Web3ChallengeUpdateOne) check() error {
	if _, ok := wuo.mutation.Web3UserID(); wuo.mutation.Web3UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Web3Challenge.web3_user"`)
	}
	return nil
}

func (wuo *Web3ChallengeUpdateOne) sqlSave(ctx context.Context) (_node *Web3Challenge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   web3challenge.Table,
			Columns: web3challenge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: web3challenge.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Web3Challenge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, web3challenge.FieldID)
		for _, f := range fields {
			if !web3challenge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != web3challenge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: web3challenge.FieldUUID,
		})
	}
	if value, ok := wuo.mutation.LoginChallenge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldLoginChallenge,
		})
	}
	if value, ok := wuo.mutation.Web3Challenge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldWeb3Challenge,
		})
	}
	if wuo.mutation.Web3UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   web3challenge.Web3UserTable,
			Columns: []string{web3challenge.Web3UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: web3user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.Web3UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   web3challenge.Web3UserTable,
			Columns: []string{web3challenge.Web3UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: web3user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Web3Challenge{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{web3challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
