// Code generated by entc, DO NOT EDIT.

package web3challenge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Web3UserID applies equality check predicate on the "web3_user_id" field. It's identical to Web3UserIDEQ.
func Web3UserID(v int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeb3UserID), v))
	})
}

// LoginChallenge applies equality check predicate on the "login_challenge" field. It's identical to LoginChallengeEQ.
func LoginChallenge(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginChallenge), v))
	})
}

// Web3Challenge applies equality check predicate on the "web3_challenge" field. It's identical to Web3ChallengeEQ.
func Web3Challenge(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeb3Challenge), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// Web3UserIDEQ applies the EQ predicate on the "web3_user_id" field.
func Web3UserIDEQ(v int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeb3UserID), v))
	})
}

// Web3UserIDNEQ applies the NEQ predicate on the "web3_user_id" field.
func Web3UserIDNEQ(v int) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeb3UserID), v))
	})
}

// Web3UserIDIn applies the In predicate on the "web3_user_id" field.
func Web3UserIDIn(vs ...int) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeb3UserID), v...))
	})
}

// Web3UserIDNotIn applies the NotIn predicate on the "web3_user_id" field.
func Web3UserIDNotIn(vs ...int) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeb3UserID), v...))
	})
}

// LoginChallengeEQ applies the EQ predicate on the "login_challenge" field.
func LoginChallengeEQ(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeNEQ applies the NEQ predicate on the "login_challenge" field.
func LoginChallengeNEQ(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeIn applies the In predicate on the "login_challenge" field.
func LoginChallengeIn(vs ...string) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoginChallenge), v...))
	})
}

// LoginChallengeNotIn applies the NotIn predicate on the "login_challenge" field.
func LoginChallengeNotIn(vs ...string) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoginChallenge), v...))
	})
}

// LoginChallengeGT applies the GT predicate on the "login_challenge" field.
func LoginChallengeGT(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeGTE applies the GTE predicate on the "login_challenge" field.
func LoginChallengeGTE(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeLT applies the LT predicate on the "login_challenge" field.
func LoginChallengeLT(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeLTE applies the LTE predicate on the "login_challenge" field.
func LoginChallengeLTE(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeContains applies the Contains predicate on the "login_challenge" field.
func LoginChallengeContains(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeHasPrefix applies the HasPrefix predicate on the "login_challenge" field.
func LoginChallengeHasPrefix(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeHasSuffix applies the HasSuffix predicate on the "login_challenge" field.
func LoginChallengeHasSuffix(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeEqualFold applies the EqualFold predicate on the "login_challenge" field.
func LoginChallengeEqualFold(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLoginChallenge), v))
	})
}

// LoginChallengeContainsFold applies the ContainsFold predicate on the "login_challenge" field.
func LoginChallengeContainsFold(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLoginChallenge), v))
	})
}

// Web3ChallengeEQ applies the EQ predicate on the "web3_challenge" field.
func Web3ChallengeEQ(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeNEQ applies the NEQ predicate on the "web3_challenge" field.
func Web3ChallengeNEQ(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeIn applies the In predicate on the "web3_challenge" field.
func Web3ChallengeIn(vs ...string) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeb3Challenge), v...))
	})
}

// Web3ChallengeNotIn applies the NotIn predicate on the "web3_challenge" field.
func Web3ChallengeNotIn(vs ...string) predicate.Web3Challenge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Web3Challenge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeb3Challenge), v...))
	})
}

// Web3ChallengeGT applies the GT predicate on the "web3_challenge" field.
func Web3ChallengeGT(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeGTE applies the GTE predicate on the "web3_challenge" field.
func Web3ChallengeGTE(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeLT applies the LT predicate on the "web3_challenge" field.
func Web3ChallengeLT(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeLTE applies the LTE predicate on the "web3_challenge" field.
func Web3ChallengeLTE(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeContains applies the Contains predicate on the "web3_challenge" field.
func Web3ChallengeContains(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeHasPrefix applies the HasPrefix predicate on the "web3_challenge" field.
func Web3ChallengeHasPrefix(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeHasSuffix applies the HasSuffix predicate on the "web3_challenge" field.
func Web3ChallengeHasSuffix(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeEqualFold applies the EqualFold predicate on the "web3_challenge" field.
func Web3ChallengeEqualFold(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWeb3Challenge), v))
	})
}

// Web3ChallengeContainsFold applies the ContainsFold predicate on the "web3_challenge" field.
func Web3ChallengeContainsFold(v string) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWeb3Challenge), v))
	})
}

// HasWeb3User applies the HasEdge predicate on the "web3_user" edge.
func HasWeb3User() predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Web3UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, Web3UserTable, Web3UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWeb3UserWith applies the HasEdge predicate on the "web3_user" edge with a given conditions (other predicates).
func HasWeb3UserWith(preds ...predicate.Web3User) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Web3UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, Web3UserTable, Web3UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Web3Challenge) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Web3Challenge) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Web3Challenge) predicate.Web3Challenge {
	return predicate.Web3Challenge(func(s *sql.Selector) {
		p(s.Not())
	})
}
