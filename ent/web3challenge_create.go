// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3challenge"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3user"
	"github.com/google/uuid"
)

// Web3ChallengeCreate is the builder for creating a Web3Challenge entity.
type Web3ChallengeCreate struct {
	config
	mutation *Web3ChallengeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (wc *Web3ChallengeCreate) SetUUID(u uuid.UUID) *Web3ChallengeCreate {
	wc.mutation.SetUUID(u)
	return wc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (wc *Web3ChallengeCreate) SetNillableUUID(u *uuid.UUID) *Web3ChallengeCreate {
	if u != nil {
		wc.SetUUID(*u)
	}
	return wc
}

// SetWeb3UserID sets the "web3_user_id" field.
func (wc *Web3ChallengeCreate) SetWeb3UserID(i int) *Web3ChallengeCreate {
	wc.mutation.SetWeb3UserID(i)
	return wc
}

// SetLoginChallenge sets the "login_challenge" field.
func (wc *Web3ChallengeCreate) SetLoginChallenge(s string) *Web3ChallengeCreate {
	wc.mutation.SetLoginChallenge(s)
	return wc
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (wc *Web3ChallengeCreate) SetWeb3Challenge(s string) *Web3ChallengeCreate {
	wc.mutation.SetWeb3Challenge(s)
	return wc
}

// SetWeb3User sets the "web3_user" edge to the Web3User entity.
func (wc *Web3ChallengeCreate) SetWeb3User(w *Web3User) *Web3ChallengeCreate {
	return wc.SetWeb3UserID(w.ID)
}

// Mutation returns the Web3ChallengeMutation object of the builder.
func (wc *Web3ChallengeCreate) Mutation() *Web3ChallengeMutation {
	return wc.mutation
}

// Save creates the Web3Challenge in the database.
func (wc *Web3ChallengeCreate) Save(ctx context.Context) (*Web3Challenge, error) {
	var (
		err  error
		node *Web3Challenge
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Web3ChallengeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *Web3ChallengeCreate) SaveX(ctx context.Context) *Web3Challenge {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *Web3ChallengeCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *Web3ChallengeCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *Web3ChallengeCreate) defaults() {
	if _, ok := wc.mutation.UUID(); !ok {
		v := web3challenge.DefaultUUID()
		wc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *Web3ChallengeCreate) check() error {
	if _, ok := wc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Web3Challenge.uuid"`)}
	}
	if _, ok := wc.mutation.Web3UserID(); !ok {
		return &ValidationError{Name: "web3_user_id", err: errors.New(`ent: missing required field "Web3Challenge.web3_user_id"`)}
	}
	if _, ok := wc.mutation.LoginChallenge(); !ok {
		return &ValidationError{Name: "login_challenge", err: errors.New(`ent: missing required field "Web3Challenge.login_challenge"`)}
	}
	if _, ok := wc.mutation.Web3Challenge(); !ok {
		return &ValidationError{Name: "web3_challenge", err: errors.New(`ent: missing required field "Web3Challenge.web3_challenge"`)}
	}
	if _, ok := wc.mutation.Web3UserID(); !ok {
		return &ValidationError{Name: "web3_user", err: errors.New(`ent: missing required edge "Web3Challenge.web3_user"`)}
	}
	return nil
}

func (wc *Web3ChallengeCreate) sqlSave(ctx context.Context) (*Web3Challenge, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *Web3ChallengeCreate) createSpec() (*Web3Challenge, *sqlgraph.CreateSpec) {
	var (
		_node = &Web3Challenge{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: web3challenge.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: web3challenge.FieldID,
			},
		}
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: web3challenge.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := wc.mutation.LoginChallenge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldLoginChallenge,
		})
		_node.LoginChallenge = value
	}
	if value, ok := wc.mutation.Web3Challenge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: web3challenge.FieldWeb3Challenge,
		})
		_node.Web3Challenge = value
	}
	if nodes := wc.mutation.Web3UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   web3challenge.Web3UserTable,
			Columns: []string{web3challenge.Web3UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: web3user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Web3UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Web3Challenge.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Web3ChallengeUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
//
func (wc *Web3ChallengeCreate) OnConflict(opts ...sql.ConflictOption) *Web3ChallengeUpsertOne {
	wc.conflict = opts
	return &Web3ChallengeUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Web3Challenge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wc *Web3ChallengeCreate) OnConflictColumns(columns ...string) *Web3ChallengeUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &Web3ChallengeUpsertOne{
		create: wc,
	}
}

type (
	// Web3ChallengeUpsertOne is the builder for "upsert"-ing
	//  one Web3Challenge node.
	Web3ChallengeUpsertOne struct {
		create *Web3ChallengeCreate
	}

	// Web3ChallengeUpsert is the "OnConflict" setter.
	Web3ChallengeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "uuid" field.
func (u *Web3ChallengeUpsert) SetUUID(v uuid.UUID) *Web3ChallengeUpsert {
	u.Set(web3challenge.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *Web3ChallengeUpsert) UpdateUUID() *Web3ChallengeUpsert {
	u.SetExcluded(web3challenge.FieldUUID)
	return u
}

// SetWeb3UserID sets the "web3_user_id" field.
func (u *Web3ChallengeUpsert) SetWeb3UserID(v int) *Web3ChallengeUpsert {
	u.Set(web3challenge.FieldWeb3UserID, v)
	return u
}

// UpdateWeb3UserID sets the "web3_user_id" field to the value that was provided on create.
func (u *Web3ChallengeUpsert) UpdateWeb3UserID() *Web3ChallengeUpsert {
	u.SetExcluded(web3challenge.FieldWeb3UserID)
	return u
}

// SetLoginChallenge sets the "login_challenge" field.
func (u *Web3ChallengeUpsert) SetLoginChallenge(v string) *Web3ChallengeUpsert {
	u.Set(web3challenge.FieldLoginChallenge, v)
	return u
}

// UpdateLoginChallenge sets the "login_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsert) UpdateLoginChallenge() *Web3ChallengeUpsert {
	u.SetExcluded(web3challenge.FieldLoginChallenge)
	return u
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (u *Web3ChallengeUpsert) SetWeb3Challenge(v string) *Web3ChallengeUpsert {
	u.Set(web3challenge.FieldWeb3Challenge, v)
	return u
}

// UpdateWeb3Challenge sets the "web3_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsert) UpdateWeb3Challenge() *Web3ChallengeUpsert {
	u.SetExcluded(web3challenge.FieldWeb3Challenge)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Web3Challenge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *Web3ChallengeUpsertOne) UpdateNewValues() *Web3ChallengeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Web3Challenge.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *Web3ChallengeUpsertOne) Ignore() *Web3ChallengeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Web3ChallengeUpsertOne) DoNothing() *Web3ChallengeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Web3ChallengeCreate.OnConflict
// documentation for more info.
func (u *Web3ChallengeUpsertOne) Update(set func(*Web3ChallengeUpsert)) *Web3ChallengeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Web3ChallengeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *Web3ChallengeUpsertOne) SetUUID(v uuid.UUID) *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *Web3ChallengeUpsertOne) UpdateUUID() *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateUUID()
	})
}

// SetWeb3UserID sets the "web3_user_id" field.
func (u *Web3ChallengeUpsertOne) SetWeb3UserID(v int) *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetWeb3UserID(v)
	})
}

// UpdateWeb3UserID sets the "web3_user_id" field to the value that was provided on create.
func (u *Web3ChallengeUpsertOne) UpdateWeb3UserID() *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateWeb3UserID()
	})
}

// SetLoginChallenge sets the "login_challenge" field.
func (u *Web3ChallengeUpsertOne) SetLoginChallenge(v string) *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetLoginChallenge(v)
	})
}

// UpdateLoginChallenge sets the "login_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsertOne) UpdateLoginChallenge() *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateLoginChallenge()
	})
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (u *Web3ChallengeUpsertOne) SetWeb3Challenge(v string) *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetWeb3Challenge(v)
	})
}

// UpdateWeb3Challenge sets the "web3_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsertOne) UpdateWeb3Challenge() *Web3ChallengeUpsertOne {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateWeb3Challenge()
	})
}

// Exec executes the query.
func (u *Web3ChallengeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Web3ChallengeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Web3ChallengeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Web3ChallengeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Web3ChallengeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Web3ChallengeCreateBulk is the builder for creating many Web3Challenge entities in bulk.
type Web3ChallengeCreateBulk struct {
	config
	builders []*Web3ChallengeCreate
	conflict []sql.ConflictOption
}

// Save creates the Web3Challenge entities in the database.
func (wcb *Web3ChallengeCreateBulk) Save(ctx context.Context) ([]*Web3Challenge, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Web3Challenge, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Web3ChallengeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *Web3ChallengeCreateBulk) SaveX(ctx context.Context) []*Web3Challenge {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *Web3ChallengeCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *Web3ChallengeCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Web3Challenge.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Web3ChallengeUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
//
func (wcb *Web3ChallengeCreateBulk) OnConflict(opts ...sql.ConflictOption) *Web3ChallengeUpsertBulk {
	wcb.conflict = opts
	return &Web3ChallengeUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Web3Challenge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wcb *Web3ChallengeCreateBulk) OnConflictColumns(columns ...string) *Web3ChallengeUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &Web3ChallengeUpsertBulk{
		create: wcb,
	}
}

// Web3ChallengeUpsertBulk is the builder for "upsert"-ing
// a bulk of Web3Challenge nodes.
type Web3ChallengeUpsertBulk struct {
	create *Web3ChallengeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Web3Challenge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *Web3ChallengeUpsertBulk) UpdateNewValues() *Web3ChallengeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Web3Challenge.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *Web3ChallengeUpsertBulk) Ignore() *Web3ChallengeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Web3ChallengeUpsertBulk) DoNothing() *Web3ChallengeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Web3ChallengeCreateBulk.OnConflict
// documentation for more info.
func (u *Web3ChallengeUpsertBulk) Update(set func(*Web3ChallengeUpsert)) *Web3ChallengeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Web3ChallengeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *Web3ChallengeUpsertBulk) SetUUID(v uuid.UUID) *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *Web3ChallengeUpsertBulk) UpdateUUID() *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateUUID()
	})
}

// SetWeb3UserID sets the "web3_user_id" field.
func (u *Web3ChallengeUpsertBulk) SetWeb3UserID(v int) *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetWeb3UserID(v)
	})
}

// UpdateWeb3UserID sets the "web3_user_id" field to the value that was provided on create.
func (u *Web3ChallengeUpsertBulk) UpdateWeb3UserID() *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateWeb3UserID()
	})
}

// SetLoginChallenge sets the "login_challenge" field.
func (u *Web3ChallengeUpsertBulk) SetLoginChallenge(v string) *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetLoginChallenge(v)
	})
}

// UpdateLoginChallenge sets the "login_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsertBulk) UpdateLoginChallenge() *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateLoginChallenge()
	})
}

// SetWeb3Challenge sets the "web3_challenge" field.
func (u *Web3ChallengeUpsertBulk) SetWeb3Challenge(v string) *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.SetWeb3Challenge(v)
	})
}

// UpdateWeb3Challenge sets the "web3_challenge" field to the value that was provided on create.
func (u *Web3ChallengeUpsertBulk) UpdateWeb3Challenge() *Web3ChallengeUpsertBulk {
	return u.Update(func(s *Web3ChallengeUpsert) {
		s.UpdateWeb3Challenge()
	})
}

// Exec executes the query.
func (u *Web3ChallengeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Web3ChallengeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Web3ChallengeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Web3ChallengeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
