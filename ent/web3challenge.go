// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3challenge"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3user"
	"github.com/google/uuid"
)

// Web3Challenge is the model entity for the Web3Challenge schema.
type Web3Challenge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Web3UserID holds the value of the "web3_user_id" field.
	Web3UserID int `json:"web3_user_id,omitempty"`
	// LoginChallenge holds the value of the "login_challenge" field.
	LoginChallenge string `json:"login_challenge,omitempty"`
	// Web3Challenge holds the value of the "web3_challenge" field.
	Web3Challenge string `json:"web3_challenge,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Web3ChallengeQuery when eager-loading is set.
	Edges Web3ChallengeEdges `json:"edges"`
}

// Web3ChallengeEdges holds the relations/edges for other nodes in the graph.
type Web3ChallengeEdges struct {
	// Web3User holds the value of the web3_user edge.
	Web3User *Web3User `json:"web3_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Web3UserOrErr returns the Web3User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Web3ChallengeEdges) Web3UserOrErr() (*Web3User, error) {
	if e.loadedTypes[0] {
		if e.Web3User == nil {
			// The edge web3_user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: web3user.Label}
		}
		return e.Web3User, nil
	}
	return nil, &NotLoadedError{edge: "web3_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Web3Challenge) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case web3challenge.FieldID, web3challenge.FieldWeb3UserID:
			values[i] = new(sql.NullInt64)
		case web3challenge.FieldLoginChallenge, web3challenge.FieldWeb3Challenge:
			values[i] = new(sql.NullString)
		case web3challenge.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Web3Challenge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Web3Challenge fields.
func (w *Web3Challenge) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case web3challenge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case web3challenge.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				w.UUID = *value
			}
		case web3challenge.FieldWeb3UserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field web3_user_id", values[i])
			} else if value.Valid {
				w.Web3UserID = int(value.Int64)
			}
		case web3challenge.FieldLoginChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_challenge", values[i])
			} else if value.Valid {
				w.LoginChallenge = value.String
			}
		case web3challenge.FieldWeb3Challenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field web3_challenge", values[i])
			} else if value.Valid {
				w.Web3Challenge = value.String
			}
		}
	}
	return nil
}

// QueryWeb3User queries the "web3_user" edge of the Web3Challenge entity.
func (w *Web3Challenge) QueryWeb3User() *Web3UserQuery {
	return (&Web3ChallengeClient{config: w.config}).QueryWeb3User(w)
}

// Update returns a builder for updating this Web3Challenge.
// Note that you need to call Web3Challenge.Unwrap() before calling this method if this Web3Challenge
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Web3Challenge) Update() *Web3ChallengeUpdateOne {
	return (&Web3ChallengeClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Web3Challenge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Web3Challenge) Unwrap() *Web3Challenge {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Web3Challenge is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Web3Challenge) String() string {
	var builder strings.Builder
	builder.WriteString("Web3Challenge(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", w.UUID))
	builder.WriteString(", web3_user_id=")
	builder.WriteString(fmt.Sprintf("%v", w.Web3UserID))
	builder.WriteString(", login_challenge=")
	builder.WriteString(w.LoginChallenge)
	builder.WriteString(", web3_challenge=")
	builder.WriteString(w.Web3Challenge)
	builder.WriteByte(')')
	return builder.String()
}

// Web3Challenges is a parsable slice of Web3Challenge.
type Web3Challenges []*Web3Challenge

func (w Web3Challenges) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
