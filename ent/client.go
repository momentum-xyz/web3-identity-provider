// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/migrate"

	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3challenge"
	"github.com/OdysseyMomentumExperience/web3-identity-provider/ent/web3user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Web3Challenge is the client for interacting with the Web3Challenge builders.
	Web3Challenge *Web3ChallengeClient
	// Web3User is the client for interacting with the Web3User builders.
	Web3User *Web3UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Web3Challenge = NewWeb3ChallengeClient(c.config)
	c.Web3User = NewWeb3UserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Web3Challenge: NewWeb3ChallengeClient(cfg),
		Web3User:      NewWeb3UserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Web3Challenge: NewWeb3ChallengeClient(cfg),
		Web3User:      NewWeb3UserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Web3Challenge.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Web3Challenge.Use(hooks...)
	c.Web3User.Use(hooks...)
}

// Web3ChallengeClient is a client for the Web3Challenge schema.
type Web3ChallengeClient struct {
	config
}

// NewWeb3ChallengeClient returns a client for the Web3Challenge from the given config.
func NewWeb3ChallengeClient(c config) *Web3ChallengeClient {
	return &Web3ChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `web3challenge.Hooks(f(g(h())))`.
func (c *Web3ChallengeClient) Use(hooks ...Hook) {
	c.hooks.Web3Challenge = append(c.hooks.Web3Challenge, hooks...)
}

// Create returns a create builder for Web3Challenge.
func (c *Web3ChallengeClient) Create() *Web3ChallengeCreate {
	mutation := newWeb3ChallengeMutation(c.config, OpCreate)
	return &Web3ChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Web3Challenge entities.
func (c *Web3ChallengeClient) CreateBulk(builders ...*Web3ChallengeCreate) *Web3ChallengeCreateBulk {
	return &Web3ChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Web3Challenge.
func (c *Web3ChallengeClient) Update() *Web3ChallengeUpdate {
	mutation := newWeb3ChallengeMutation(c.config, OpUpdate)
	return &Web3ChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Web3ChallengeClient) UpdateOne(w *Web3Challenge) *Web3ChallengeUpdateOne {
	mutation := newWeb3ChallengeMutation(c.config, OpUpdateOne, withWeb3Challenge(w))
	return &Web3ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Web3ChallengeClient) UpdateOneID(id int) *Web3ChallengeUpdateOne {
	mutation := newWeb3ChallengeMutation(c.config, OpUpdateOne, withWeb3ChallengeID(id))
	return &Web3ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Web3Challenge.
func (c *Web3ChallengeClient) Delete() *Web3ChallengeDelete {
	mutation := newWeb3ChallengeMutation(c.config, OpDelete)
	return &Web3ChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *Web3ChallengeClient) DeleteOne(w *Web3Challenge) *Web3ChallengeDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *Web3ChallengeClient) DeleteOneID(id int) *Web3ChallengeDeleteOne {
	builder := c.Delete().Where(web3challenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Web3ChallengeDeleteOne{builder}
}

// Query returns a query builder for Web3Challenge.
func (c *Web3ChallengeClient) Query() *Web3ChallengeQuery {
	return &Web3ChallengeQuery{
		config: c.config,
	}
}

// Get returns a Web3Challenge entity by its id.
func (c *Web3ChallengeClient) Get(ctx context.Context, id int) (*Web3Challenge, error) {
	return c.Query().Where(web3challenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Web3ChallengeClient) GetX(ctx context.Context, id int) *Web3Challenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeb3User queries the web3_user edge of a Web3Challenge.
func (c *Web3ChallengeClient) QueryWeb3User(w *Web3Challenge) *Web3UserQuery {
	query := &Web3UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(web3challenge.Table, web3challenge.FieldID, id),
			sqlgraph.To(web3user.Table, web3user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, web3challenge.Web3UserTable, web3challenge.Web3UserColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Web3ChallengeClient) Hooks() []Hook {
	return c.hooks.Web3Challenge
}

// Web3UserClient is a client for the Web3User schema.
type Web3UserClient struct {
	config
}

// NewWeb3UserClient returns a client for the Web3User from the given config.
func NewWeb3UserClient(c config) *Web3UserClient {
	return &Web3UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `web3user.Hooks(f(g(h())))`.
func (c *Web3UserClient) Use(hooks ...Hook) {
	c.hooks.Web3User = append(c.hooks.Web3User, hooks...)
}

// Create returns a create builder for Web3User.
func (c *Web3UserClient) Create() *Web3UserCreate {
	mutation := newWeb3UserMutation(c.config, OpCreate)
	return &Web3UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Web3User entities.
func (c *Web3UserClient) CreateBulk(builders ...*Web3UserCreate) *Web3UserCreateBulk {
	return &Web3UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Web3User.
func (c *Web3UserClient) Update() *Web3UserUpdate {
	mutation := newWeb3UserMutation(c.config, OpUpdate)
	return &Web3UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Web3UserClient) UpdateOne(w *Web3User) *Web3UserUpdateOne {
	mutation := newWeb3UserMutation(c.config, OpUpdateOne, withWeb3User(w))
	return &Web3UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Web3UserClient) UpdateOneID(id int) *Web3UserUpdateOne {
	mutation := newWeb3UserMutation(c.config, OpUpdateOne, withWeb3UserID(id))
	return &Web3UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Web3User.
func (c *Web3UserClient) Delete() *Web3UserDelete {
	mutation := newWeb3UserMutation(c.config, OpDelete)
	return &Web3UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *Web3UserClient) DeleteOne(w *Web3User) *Web3UserDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *Web3UserClient) DeleteOneID(id int) *Web3UserDeleteOne {
	builder := c.Delete().Where(web3user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Web3UserDeleteOne{builder}
}

// Query returns a query builder for Web3User.
func (c *Web3UserClient) Query() *Web3UserQuery {
	return &Web3UserQuery{
		config: c.config,
	}
}

// Get returns a Web3User entity by its id.
func (c *Web3UserClient) Get(ctx context.Context, id int) (*Web3User, error) {
	return c.Query().Where(web3user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Web3UserClient) GetX(ctx context.Context, id int) *Web3User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeb3Challenges queries the web3_challenges edge of a Web3User.
func (c *Web3UserClient) QueryWeb3Challenges(w *Web3User) *Web3ChallengeQuery {
	query := &Web3ChallengeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(web3user.Table, web3user.FieldID, id),
			sqlgraph.To(web3challenge.Table, web3challenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, web3user.Web3ChallengesTable, web3user.Web3ChallengesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Web3UserClient) Hooks() []Hook {
	return c.hooks.Web3User
}
